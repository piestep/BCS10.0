<?xml version="1.0"?>
<body>

<!-- Boolean Precedence -->

<test>
<name>And_Not_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 and not 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   AND_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Unary_Expression</ln>
<ln>            The_Operator   NOT_SYMBOL</ln>
<ln>            The_Right      [ 9 ]</ln>
<ln>          end Unary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<test>
<name>Or_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 or 2 and 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   OR_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Binary_Expression</ln>
<ln>            The_Operator   AND_SYMBOL</ln>
<ln>            The_Left       [ 9 ]</ln>
<ln>            The_Right      [ 10 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     2</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<test>
<name>Xor_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 or 2 xor 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   XOR_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Binary_Expression</ln>
<ln>            The_Operator   OR_SYMBOL</ln>
<ln>            The_Left       [ 9 ]</ln>
<ln>            The_Right      [ 10 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     2</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<!-- Arithmetic Precedence -->

<test>
<name>Negate_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := - 1 + 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Unary_Expression</ln>
<ln>            The_Operator   MINUS_SYMBOL</ln>
<ln>            The_Right      [ 9 ]</ln>
<ln>          end Unary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<test>
<name>Plus_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 + 2 - 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   MINUS_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 9 ]</ln>
<ln>            The_Right      [ 10 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     2</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<test>
<name>Paren_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 + (2 + 3);</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 9 ]</ln>
<ln>            The_Right      [ 10 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     2</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<test>
<name>Times_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 + 2 * 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Binary_Expression</ln>
<ln>            The_Operator   TIMES_SYMBOL</ln>
<ln>            The_Left       [ 9 ]</ln>
<ln>            The_Right      [ 10 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     2</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<test>
<name>Divide_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 + 2 / 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Binary_Expression</ln>
<ln>            The_Operator   DIVIDE_SYMBOL</ln>
<ln>            The_Left       [ 9 ]</ln>
<ln>            The_Right      [ 10 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     2</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<test>
<name>Rem_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 + 2 rem 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Binary_Expression</ln>
<ln>            The_Operator   REM_SYMBOL</ln>
<ln>            The_Left       [ 9 ]</ln>
<ln>            The_Right      [ 10 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     2</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>

<test>
<name>Mod_Precedence.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 + 2 mod 3;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<listing>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            The_Procedure    [ 3 ]</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            The_Statements   [ 4 ]</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    4] : Assignment_Statement</ln>
<ln>            The_Variable   [ 5 ]</ln>
<ln>            The_Expression [ 6 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    5] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    6] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 7 ]</ln>
<ln>            The_Right      [ 8 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Binary_Expression</ln>
<ln>            The_Operator   MOD_SYMBOL</ln>
<ln>            The_Left       [ 9 ]</ln>
<ln>            The_Right      [ 10 ]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     2</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     3</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
</listing>
</test>
</body>
