<?xml version="1.0"?>
<body>

<test>
<name>Constant.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln></ln>
<ln>   type ID_TYPE is new INTEGER range 0 .. 10;</ln>
<ln>   A : ID_TYPE;</ln>
<ln></ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 0 + 0;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  ID_TYPE</ln>
<ln>            {Type_Identifier ID_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    8] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 10 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   10] : Assignment_Statement</ln>
<ln>            The_Variable   [ 11 ]</ln>
<ln>            The_Expression [ 12 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   11] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   12] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Zero_Plus_Variable.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln></ln>
<ln>   type ID_TYPE is new INTEGER range 0 .. 10;</ln>
<ln>   A : ID_TYPE;</ln>
<ln></ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 0 + A;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  ID_TYPE</ln>
<ln>            {Type_Identifier ID_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    8] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 10 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   10] : Assignment_Statement</ln>
<ln>            The_Variable   [ 11 ]</ln>
<ln>            The_Expression [ 12 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   11] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   12] : Variable_Expression</ln>
<ln>            The_Variable   [ 13 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   13] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Variable_Plus_Zero.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln></ln>
<ln>   type ID_TYPE is new INTEGER range 0 .. 10;</ln>
<ln>   A : ID_TYPE;</ln>
<ln></ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := A + 0;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  ID_TYPE</ln>
<ln>            {Type_Identifier ID_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    8] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 10 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   10] : Assignment_Statement</ln>
<ln>            The_Variable   [ 11 ]</ln>
<ln>            The_Expression [ 12 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   11] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   12] : Variable_Expression</ln>
<ln>            The_Variable   [ 13 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   13] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>One_Plus_Variable.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln></ln>
<ln>   type ID_TYPE is new INTEGER range 0 .. 10;</ln>
<ln>   A : ID_TYPE;</ln>
<ln></ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := 1 + A;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  ID_TYPE</ln>
<ln>            {Type_Identifier ID_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    8] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 10 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   10] : Assignment_Statement</ln>
<ln>            The_Variable   [ 11 ]</ln>
<ln>            The_Expression [ 12 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   11] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   12] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 13 ]</ln>
<ln>            The_Right      [ 14 ]</ln>
<ln>            The_Result [Variable_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[   13] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  1]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[   14] : Variable_Expression</ln>
<ln>            The_Variable   [ 15 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   15] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Variable_Plus_One.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln></ln>
<ln>   type ID_TYPE is new INTEGER range 0 .. 10;</ln>
<ln>   A : ID_TYPE;</ln>
<ln></ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := A + 1;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  ID_TYPE</ln>
<ln>            {Type_Identifier ID_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    8] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 10 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   10] : Assignment_Statement</ln>
<ln>            The_Variable   [ 11 ]</ln>
<ln>            The_Expression [ 12 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   11] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   12] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 13 ]</ln>
<ln>            The_Right      [ 14 ]</ln>
<ln>            The_Result [Variable_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[   13] : Variable_Expression</ln>
<ln>            The_Variable   [ 15 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   15] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   14] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  1]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Variable.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln></ln>
<ln>   type ID_TYPE is new INTEGER range 0 .. 10;</ln>
<ln>   A : ID_TYPE;</ln>
<ln>   B : ID_TYPE;</ln>
<ln></ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := A + B;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  ID_TYPE</ln>
<ln>            {Type_Identifier ID_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    8] : Operand_Expression</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Operand_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 9 ]</ln>
<ln>            The_Next       [ 10 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[   10] : Identifier_Declaration</ln>
<ln>            The_Identifier B</ln>
<ln>            {Variable_Identifier B; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 11 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 12 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   12] : Assignment_Statement</ln>
<ln>            The_Variable   [ 13 ]</ln>
<ln>            The_Expression [ 14 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   13] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   14] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 15 ]</ln>
<ln>            The_Right      [ 16 ]</ln>
<ln>            The_Result [Variable_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[   15] : Variable_Expression</ln>
<ln>            The_Variable   [ 17 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   17] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   16] : Variable_Expression</ln>
<ln>            The_Variable   [ 18 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier B; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   18] : Variable</ln>
<ln>            The_Identifier  B</ln>
<ln>            {Variable_Identifier B; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier B; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>
</body>
