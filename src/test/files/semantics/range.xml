<?xml version="1.0"?>
<body>

<test>
<name>Discreate.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Declarations</ln>
<ln>   type DISCREATE_TYPE_WITH_RANGE is new BOOLEAN range FALSE .. FALSE;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      null;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  DISCREATE_TYPE_WITH_RANGE</ln>
<ln>            {Type_Identifier DISCREATE_TYPE_WITH_RANGE; (Discrete_Type  0, 0, 1. (Discrete_Type  0, 1, 1. (Universal_Boolean)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier BOOLEAN</ln>
<ln>            {Type_Identifier BOOLEAN; (Discrete_Type  0, 1, 1. (Universal_Boolean))}</ln>
<ln>            The_First      [ 6 ]</ln>
<ln>            The_Last       [ 7 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    6] : Variable_Expression</ln>
<ln>            The_Variable   [ 8 ]</ln>
<ln>            The_Result [Constant_Operand (Universal_Boolean)  0]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[    8] : Variable</ln>
<ln>            The_Identifier  FALSE</ln>
<ln>            {Constant_Identifier FALSE; (Universal_Boolean);  0}</ln>
<ln>            The_Result [Identifier_Operand (Universal_Boolean):{Constant_Identifier FALSE; (Universal_Boolean);  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    7] : Variable_Expression</ln>
<ln>            The_Variable   [ 9 ]</ln>
<ln>            The_Result [Constant_Operand (Universal_Boolean)  0]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[    9] : Variable</ln>
<ln>            The_Identifier  FALSE</ln>
<ln>            {Constant_Identifier FALSE; (Universal_Boolean);  0}</ln>
<ln>            The_Result [Identifier_Operand (Universal_Boolean):{Constant_Identifier FALSE; (Universal_Boolean);  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 10 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   10] : Null_Statement</ln>
<ln>          end Null_Statement</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Scalar.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Declarations</ln>
<ln>   type SCALAR_TYPE_WITH_RANGE is new INTEGER range 0 .. 10;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      null;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  SCALAR_TYPE_WITH_RANGE</ln>
<ln>            {Type_Identifier SCALAR_TYPE_WITH_RANGE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 6 ]</ln>
<ln>            The_Last       [ 7 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    6] : Integer_Expression</ln>
<ln>            The_String     0</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 8 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    8] : Null_Statement</ln>
<ln>          end Null_Statement</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Mod.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Declarations</ln>
<ln>   type MOD_TYPE is mod 12;</ln>
<ln>   type MOD_TYPE_WITH_RANGE is new MOD_TYPE range 0 .. 10;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      null;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  MOD_TYPE</ln>
<ln>            {Type_Identifier MOD_TYPE; (Modular_Type  0, 11, 12, 4. (Universal_Integer))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Mod_Definition</ln>
<ln>            The_Expression  [ 7 ]</ln>
<ln>          end Mod_Definition</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     12</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  12]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    6] : Type_Declaration</ln>
<ln>            The_Identifier  MOD_TYPE_WITH_RANGE</ln>
<ln>            {Type_Identifier MOD_TYPE_WITH_RANGE; (Modular_Type  0, 10, 12, 4. (Modular_Type  0, 11, 12, 4. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 8 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    8] : Range_Definition</ln>
<ln>            The_Identifier MOD_TYPE</ln>
<ln>            {Type_Identifier MOD_TYPE; (Modular_Type  0, 11, 12, 4. (Universal_Integer))}</ln>
<ln>            The_First      [ 9 ]</ln>
<ln>            The_Last       [ 10 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     0</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   10] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 11 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   11] : Null_Statement</ln>
<ln>          end Null_Statement</ln>
<ln></ln>
</graph>
</test>
</body>
