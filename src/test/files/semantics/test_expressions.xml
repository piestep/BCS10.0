<?xml version="1.0"?>
<body>

<test>
<name>Unary-Boolean.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   A : BOOLEAN;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := not A;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 5 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 6 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    6] : Assignment_Statement</ln>
<ln>            The_Variable   [ 7 ]</ln>
<ln>            The_Expression [ 8 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    7] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[    8] : Unary_Expression</ln>
<ln>            The_Operator   NOT_SYMBOL</ln>
<ln>            The_Right      [ 9 ]</ln>
<ln>            The_Result [Variable_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean))]</ln>
<ln>          end Unary_Expression</ln>
<ln></ln>
<ln>[    9] : Variable_Expression</ln>
<ln>            The_Variable   [ 10 ]</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   10] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Unary-Integer.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   type ID_TYPE is new INTEGER range -10 .. 10;</ln>
<ln>   A : ID_TYPE;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := - A;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  ID_TYPE</ln>
<ln>            {Type_Identifier ID_TYPE; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Unary_Expression</ln>
<ln>            The_Operator   MINUS_SYMBOL</ln>
<ln>            The_Right      [ 9 ]</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer) -10]</ln>
<ln>          end Unary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 10 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 11 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   11] : Assignment_Statement</ln>
<ln>            The_Variable   [ 12 ]</ln>
<ln>            The_Expression [ 13 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   12] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   13] : Unary_Expression</ln>
<ln>            The_Operator   MINUS_SYMBOL</ln>
<ln>            The_Right      [ 14 ]</ln>
<ln>            The_Result [Variable_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)))]</ln>
<ln>          end Unary_Expression</ln>
<ln></ln>
<ln>[   14] : Variable_Expression</ln>
<ln>            The_Variable   [ 15 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   15] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Unary-Mod.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   type MOD_TYPE is mod 12;</ln>
<ln>   A : MOD_TYPE;</ln>
<ln>   B : constant MOD_TYPE := 1;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := - B;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  MOD_TYPE</ln>
<ln>            {Type_Identifier MOD_TYPE; (Modular_Type  0, 11, 12, 4. (Universal_Integer))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Mod_Definition</ln>
<ln>            The_Expression  [ 7 ]</ln>
<ln>          end Mod_Definition</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     12</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  12]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 8 ]</ln>
<ln>            The_Next       [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    9] : Identifier_Declaration</ln>
<ln>            The_Identifier B</ln>
<ln>            {Constant_Identifier B; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  1}</ln>
<ln>            Constant       TRUE</ln>
<ln>            The_Definition [ 10 ]</ln>
<ln>            The_Expresson  [ 11 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[   11] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  1]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 12 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   12] : Assignment_Statement</ln>
<ln>            The_Variable   [ 13 ]</ln>
<ln>            The_Expression [ 14 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   13] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer)):{Variable_Identifier A; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   14] : Unary_Expression</ln>
<ln>            The_Operator   MINUS_SYMBOL</ln>
<ln>            The_Right      [ 15 ]</ln>
<ln>            The_Result [Constant_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer))  11]</ln>
<ln>          end Unary_Expression</ln>
<ln></ln>
<ln>[   15] : Variable_Expression</ln>
<ln>            The_Variable   [ 16 ]</ln>
<ln>            The_Result [Constant_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer))  1]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   16] : Variable</ln>
<ln>            The_Identifier  B</ln>
<ln>            {Constant_Identifier B; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  1}</ln>
<ln>            The_Result [Identifier_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer)):{Constant_Identifier B; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  1}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Binary-Relation.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   A : BOOLEAN;</ln>
<ln>   B : BOOLEAN;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := A = B;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 5 ]</ln>
<ln>            The_Next       [ 6 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier B</ln>
<ln>            {Variable_Identifier B; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 7 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 8 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    8] : Assignment_Statement</ln>
<ln>            The_Variable   [ 9 ]</ln>
<ln>            The_Expression [ 10 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    9] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   10] : Binary_Expression</ln>
<ln>            The_Operator   EQUAL_SYMBOL</ln>
<ln>            The_Left       [ 11 ]</ln>
<ln>            The_Right      [ 12 ]</ln>
<ln>            The_Result [Variable_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean))]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[   11] : Variable_Expression</ln>
<ln>            The_Variable   [ 13 ]</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   13] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   12] : Variable_Expression</ln>
<ln>            The_Variable   [ 14 ]</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier B; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   14] : Variable</ln>
<ln>            The_Identifier  B</ln>
<ln>            {Variable_Identifier B; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier B; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Binary-Boolean.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   A : BOOLEAN;</ln>
<ln>   B : BOOLEAN;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := A AND B;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 5 ]</ln>
<ln>            The_Next       [ 6 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier B</ln>
<ln>            {Variable_Identifier B; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 7 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 8 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[    8] : Assignment_Statement</ln>
<ln>            The_Variable   [ 9 ]</ln>
<ln>            The_Expression [ 10 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[    9] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   10] : Binary_Expression</ln>
<ln>            The_Operator   AND_SYMBOL</ln>
<ln>            The_Left       [ 11 ]</ln>
<ln>            The_Right      [ 12 ]</ln>
<ln>            The_Result [Variable_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean))]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[   11] : Variable_Expression</ln>
<ln>            The_Variable   [ 13 ]</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   13] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier A; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   12] : Variable_Expression</ln>
<ln>            The_Variable   [ 14 ]</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier B; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   14] : Variable</ln>
<ln>            The_Identifier  B</ln>
<ln>            {Variable_Identifier B; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Discrete_Type  0, 1, 1. (Universal_Boolean)):{Variable_Identifier B; (Discrete_Type  0, 1, 1. (Universal_Boolean));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Binary-Integer.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   type ID_TYPE is new INTEGER range -10 .. 10;</ln>
<ln>   A : ID_TYPE;</ln>
<ln>   B : ID_TYPE;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := A + B;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  ID_TYPE</ln>
<ln>            {Type_Identifier ID_TYPE; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Unary_Expression</ln>
<ln>            The_Operator   MINUS_SYMBOL</ln>
<ln>            The_Right      [ 9 ]</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer) -10]</ln>
<ln>          end Unary_Expression</ln>
<ln></ln>
<ln>[    9] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 10 ]</ln>
<ln>            The_Next       [ 11 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[   11] : Identifier_Declaration</ln>
<ln>            The_Identifier B</ln>
<ln>            {Variable_Identifier B; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 12 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 13 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   13] : Assignment_Statement</ln>
<ln>            The_Variable   [ 14 ]</ln>
<ln>            The_Expression [ 15 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   14] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   15] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 16 ]</ln>
<ln>            The_Right      [ 17 ]</ln>
<ln>            The_Result [Variable_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)))]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[   16] : Variable_Expression</ln>
<ln>            The_Variable   [ 18 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   18] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   17] : Variable_Expression</ln>
<ln>            The_Variable   [ 19 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier B; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   19] : Variable</ln>
<ln>            The_Identifier  B</ln>
<ln>            {Variable_Identifier B; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier B; (Signed_Type -10, 10, 5. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Binary-Mod.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   type MOD_TYPE is mod 12;</ln>
<ln>   A : MOD_TYPE;</ln>
<ln>   B : constant MOD_TYPE := 11;</ln>
<ln>   C : constant MOD_TYPE := 11;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      A := B + C;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  MOD_TYPE</ln>
<ln>            {Type_Identifier MOD_TYPE; (Modular_Type  0, 11, 12, 4. (Universal_Integer))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Mod_Definition</ln>
<ln>            The_Expression  [ 7 ]</ln>
<ln>          end Mod_Definition</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     12</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  12]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 8 ]</ln>
<ln>            The_Next       [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    9] : Identifier_Declaration</ln>
<ln>            The_Identifier B</ln>
<ln>            {Constant_Identifier B; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  11}</ln>
<ln>            Constant       TRUE</ln>
<ln>            The_Definition [ 10 ]</ln>
<ln>            The_Expresson  [ 11 ]</ln>
<ln>            The_Next       [ 12 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[   11] : Integer_Expression</ln>
<ln>            The_String     11</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  11]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   12] : Identifier_Declaration</ln>
<ln>            The_Identifier C</ln>
<ln>            {Constant_Identifier C; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  11}</ln>
<ln>            Constant       TRUE</ln>
<ln>            The_Definition [ 13 ]</ln>
<ln>            The_Expresson  [ 14 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[   14] : Integer_Expression</ln>
<ln>            The_String     11</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  11]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 15 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   15] : Assignment_Statement</ln>
<ln>            The_Variable   [ 16 ]</ln>
<ln>            The_Expression [ 17 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   16] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer)):{Variable_Identifier A; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   17] : Binary_Expression</ln>
<ln>            The_Operator   PLUS_SYMBOL</ln>
<ln>            The_Left       [ 18 ]</ln>
<ln>            The_Right      [ 19 ]</ln>
<ln>            The_Result [Constant_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer))  10]</ln>
<ln>          end Binary_Expression</ln>
<ln></ln>
<ln>[   18] : Variable_Expression</ln>
<ln>            The_Variable   [ 20 ]</ln>
<ln>            The_Result [Constant_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer))  11]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   20] : Variable</ln>
<ln>            The_Identifier  B</ln>
<ln>            {Constant_Identifier B; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  11}</ln>
<ln>            The_Result [Identifier_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer)):{Constant_Identifier B; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  11}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   19] : Variable_Expression</ln>
<ln>            The_Variable   [ 21 ]</ln>
<ln>            The_Result [Constant_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer))  11]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   21] : Variable</ln>
<ln>            The_Identifier  C</ln>
<ln>            {Constant_Identifier C; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  11}</ln>
<ln>            The_Result [Identifier_Operand (Modular_Type  0, 11, 12, 4. (Universal_Integer)):{Constant_Identifier C; (Modular_Type  0, 11, 12, 4. (Universal_Integer));  11}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Parameter.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   type PARAM_TYPE is new INTEGER range 0 .. 10;</ln>
<ln>   A : PARAM_TYPE;</ln>
<ln>   procedure MAIN (B : PARAM_TYPE) is</ln>
<ln>   begin</ln>
<ln>      A := B;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  PARAM_TYPE</ln>
<ln>            {Type_Identifier PARAM_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     0</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Parameters   [ 10 ]</ln>
<ln>            The_Statements   [ 11 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   10] : Parameter</ln>
<ln>            The_Name        B</ln>
<ln>            {Parameter_Identifier B; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))); TRUE; FALSE;  0}</ln>
<ln>            In              TRUE</ln>
<ln>            Out             FALSE</ln>
<ln>            The_Definition  PARAM_TYPE</ln>
<ln>            {Type_Identifier PARAM_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>          end Parameter</ln>
<ln></ln>
<ln>[   11] : Assignment_Statement</ln>
<ln>            The_Variable   [ 12 ]</ln>
<ln>            The_Expression [ 13 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   12] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   13] : Variable_Expression</ln>
<ln>            The_Variable   [ 14 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Parameter_Identifier B; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))); TRUE; FALSE;  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   14] : Variable</ln>
<ln>            The_Identifier  B</ln>
<ln>            {Parameter_Identifier B; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))); TRUE; FALSE;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Parameter_Identifier B; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))); TRUE; FALSE;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>

<test>
<name>Index.</name>
<code>
<ln>package body SYNTAX is</ln>
<ln>   -- Expressions</ln>
<ln>   type INDEX_TYPE is new INTEGER range 0 .. 10;</ln>
<ln>   A : INDEX_TYPE;</ln>
<ln>   procedure MAIN is</ln>
<ln>   begin</ln>
<ln>      for I in INDEX_TYPE range 1 .. 10 loop</ln>
<ln>          A := I;</ln>
<ln>      end loop;</ln>
<ln>   end MAIN;</ln>
<ln>end SYNTAX;</ln>
</code>
<graph>
<ln>[    1] : Compilation_Unit</ln>
<ln>             The_Unit [ 2 ]</ln>
<ln>          end Compilation_Unit</ln>
<ln></ln>
<ln>[    2] : Package_Body</ln>
<ln>            The_Name         SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>            The_Declarations [ 3 ]</ln>
<ln>            The_Procedure    [ 4 ]</ln>
<ln>            The_Identifier   SYNTAX</ln>
<ln>            {Package_Identifier SYNTAX}</ln>
<ln>          end Package_Body</ln>
<ln></ln>
<ln>[    3] : Type_Declaration</ln>
<ln>            The_Identifier  INDEX_TYPE</ln>
<ln>            {Type_Identifier INDEX_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            The_Definition  [ 5 ]</ln>
<ln>            The_Next        [ 6 ]</ln>
<ln>          end Type_Declaration</ln>
<ln></ln>
<ln>[    5] : Range_Definition</ln>
<ln>            The_Identifier INTEGER</ln>
<ln>            {Type_Identifier INTEGER; (Signed_Type -128, 127, 8. (Universal_Integer))}</ln>
<ln>            The_First      [ 7 ]</ln>
<ln>            The_Last       [ 8 ]</ln>
<ln>          end Range_Definition</ln>
<ln></ln>
<ln>[    7] : Integer_Expression</ln>
<ln>            The_String     0</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  0]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    8] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[    6] : Identifier_Declaration</ln>
<ln>            The_Identifier A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            Constant       FALSE</ln>
<ln>            The_Definition [ 9 ]</ln>
<ln>          end Identifier_Declaration</ln>
<ln></ln>
<ln>[    4] : Procedure_Body</ln>
<ln>            The_Name         MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>            The_Statements   [ 10 ]</ln>
<ln>            The_Identifier  MAIN</ln>
<ln>            {Procedure_Identifier MAIN}</ln>
<ln>          end Procedure</ln>
<ln></ln>
<ln>[   10] : For_Statement</ln>
<ln>            The_Index        I</ln>
<ln>            {Index_Identifier I; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0}</ln>
<ln>            The_Definition   INDEX_TYPE</ln>
<ln>            {Type_Identifier INDEX_TYPE; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)))}</ln>
<ln>            Is_Reverse       FALSE</ln>
<ln>            The_First        [ 11 ]</ln>
<ln>            The_Last         [ 12 ]</ln>
<ln>            The_Statements   [ 13 ]</ln>
<ln>          end For_Statement</ln>
<ln></ln>
<ln>[   11] : Integer_Expression</ln>
<ln>            The_String     1</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  1]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   12] : Integer_Expression</ln>
<ln>            The_String     10</ln>
<ln>            The_Result [Constant_Operand (Universal_Integer)  10]</ln>
<ln>          end Integer_Expression</ln>
<ln></ln>
<ln>[   13] : Assignment_Statement</ln>
<ln>            The_Variable   [ 14 ]</ln>
<ln>            The_Expression [ 15 ]</ln>
<ln>          end Assignment_Statement</ln>
<ln></ln>
<ln>[   14] : Variable</ln>
<ln>            The_Identifier  A</ln>
<ln>            {Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Variable_Identifier A; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0;  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
<ln>[   15] : Variable_Expression</ln>
<ln>            The_Variable   [ 16 ]</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Index_Identifier I; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0}]</ln>
<ln>          end Variable_Expression</ln>
<ln></ln>
<ln>[   16] : Variable</ln>
<ln>            The_Identifier  I</ln>
<ln>            {Index_Identifier I; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0}</ln>
<ln>            The_Result [Identifier_Operand (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer))):{Index_Identifier I; (Signed_Type  0, 10, 4. (Signed_Type -128, 127, 8. (Universal_Integer)));  0}]</ln>
<ln>          end Variable</ln>
<ln></ln>
</graph>
</test>
</body>
